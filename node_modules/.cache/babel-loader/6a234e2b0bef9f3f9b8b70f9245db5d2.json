{"ast":null,"code":"import { authAPI } from \"../API/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  email: null,\n  id: null,\n  login: null,\n  isAuth: false\n};\n\nconst loginReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      {\n        return { ...state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const setUserData = (email, id, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    email,\n    id,\n    login,\n    isAuth\n  }\n});\nexport const getAuth = () => async dispatch => {\n  let response = await authAPI.authMe();\n\n  if (response.data.resultCode === 0) {\n    let {\n      email,\n      id,\n      login\n    } = response.data.data;\n    dispatch(setUserData(email, id, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuth());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit('login', {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setUserData(null, null, null, false));\n  }\n};\nexport default loginReducer;","map":{"version":3,"sources":["C:/Users/1/Desktop/gittest/samuraiApp/src/Redux/login-reducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","email","id","login","isAuth","loginReducer","state","action","type","payload","setUserData","getAuth","dispatch","response","authMe","data","resultCode","password","rememberMe","message","messages","length","_error","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,IADQ;AAEfC,EAAAA,EAAE,EAAE,IAFW;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAUA,MAAMC,YAAY,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AAAoB;AAChB,eAAO,EACH,GAAGO,KADA;AAEH,aAAGC,MAAM,CAACE;AAFP,SAAP;AAIH;;AACD;AACI,aAAOH,KAAP;AARR;AAUH,CAXD;;AAaA,OAAO,MAAMI,WAAW,GAAG,CAACT,KAAD,EAAQC,EAAR,EAAYC,KAAZ,EAAmBC,MAAnB,MAA+B;AAACI,EAAAA,IAAI,EAAET,aAAP;AAAsBU,EAAAA,OAAO,EAAE;AAACR,IAAAA,KAAD;AAAQC,IAAAA,EAAR;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB;AAA/B,CAA/B,CAApB;AAEP,OAAO,MAAMO,OAAO,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC1C,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,MAAR,EAArB;;AACK,MAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAmC;AAC/B,QAAI;AAACf,MAAAA,KAAD;AAAQC,MAAAA,EAAR;AAAYC,MAAAA;AAAZ,QAAqBU,QAAQ,CAACE,IAAT,CAAcA,IAAvC;AACAH,IAAAA,QAAQ,CAACF,WAAW,CAACT,KAAD,EAAQC,EAAR,EAAYC,KAAZ,EAAmB,IAAnB,CAAZ,CAAR;AACH;AACR,CANE;AAQP,OAAO,MAAMA,KAAK,GAAG,CAACF,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KACjB,MAAON,QAAP,IAAmB;AACf,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACM,KAAR,CAAcF,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,CAArB;;AACI,MAAIL,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAmC;AAC/BJ,IAAAA,QAAQ,CAACD,OAAO,EAAR,CAAR;AACH,GAFD,MAEO;AACH,QAAIQ,OAAO,GAAGN,QAAQ,CAACE,IAAT,CAAcK,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCR,QAAQ,CAACE,IAAT,CAAcK,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACAR,IAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAACwB,MAAAA,MAAM,EAAEH;AAAT,KAAV,CAAX,CAAR;AACH;AACR,CATE;AAaP,OAAO,MAAMI,MAAM,GAAG,MAClB,MAAOX,QAAP,IAAmB;AACf,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAAC0B,MAAR,EAArB;;AACI,MAAIV,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAmC;AAC/BJ,IAAAA,QAAQ,CAACF,WAAW,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAZ,CAAR;AACH;AACR,CANE;AASP,eAAeL,YAAf","sourcesContent":["import {authAPI} from \"../API/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\nlet initialState = {\r\n    email: null,\r\n    id: null,\r\n    login: null,\r\n    isAuth: false\r\n\r\n\r\n}\r\n\r\n\r\nconst loginReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserData = (email, id, login, isAuth) => ({type: SET_USER_DATA, payload: {email, id, login, isAuth}})\r\n\r\nexport const getAuth = () => async (dispatch) => {\r\n       let response = await authAPI.authMe()\r\n            if (response.data.resultCode === 0){\r\n                let {email, id, login} = response.data.data\r\n                dispatch(setUserData(email, id, login, true))\r\n            }\r\n    }\r\n\r\nexport const login = (email, password, rememberMe) =>\r\n    async (dispatch) =>{\r\n        let response = await authAPI.login(email, password, rememberMe)\r\n            if (response.data.resultCode === 0){\r\n                dispatch(getAuth())\r\n            } else {\r\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n                dispatch(stopSubmit('login', {_error: message}))\r\n            }\r\n    }\r\n\r\n\r\n\r\nexport const logout = () =>\r\n    async (dispatch) =>{\r\n        let response = await authAPI.logout()\r\n            if (response.data.resultCode === 0){\r\n                dispatch(setUserData(null, null, null, false))\r\n            }\r\n    }\r\n\r\n\r\nexport default loginReducer;\r\n"]},"metadata":{},"sourceType":"module"}