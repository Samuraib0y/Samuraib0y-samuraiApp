{"ast":null,"code":"import { usersAPI } from \"../API/api\";\nimport { updateObjectInArray } from \"../Utils/object-helper\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_PROGRESS_FOLLOWING = 'TOGGLE_PROGRESS_FOLLOWING';\nconst SET_FRIENDS = 'SET_FRIENDS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingProgress: [],\n  friends: []\n};\n\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: true\n        }) // users: state.users.map(u => {\n        //     if (u.id === action.userId) {\n        //         return {...u, followed: true}\n        //Мы пробигаемся по массиву юзеров , если находим id юзера, что пришел из action\n        //берем его , копируем и меняем значение followed на true.\n\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: false\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.page\n        };\n      }\n\n    case SET_TOTAL_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetch\n        };\n      }\n\n    case TOGGLE_PROGRESS_FOLLOWING:\n      return { ...state,\n        followingProgress: action.isFollowing ? [...state.followingProgress, action.userId] : state.followingProgress.filter(id => id != action.userId)\n      };\n\n    case SET_FRIENDS:\n      return { ...state,\n        friends: state.users.filter(users => users.followed = true)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const follow = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollow = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = page => ({\n  type: SET_CURRENT_PAGE,\n  page\n});\nexport const setTotalCount = count => ({\n  type: SET_TOTAL_COUNT,\n  count\n});\nexport const toggleIsFetching = isFetch => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetch\n});\nexport const toggleProgressIsFollowing = (isFollowing, userId) => ({\n  type: TOGGLE_PROGRESS_FOLLOWING,\n  isFollowing,\n  userId\n});\nexport const setFriends = friends => ({\n  type: SET_FRIENDS,\n  friends\n});\nexport const getUsersThunkCreator = (currentPage, pageSize) => async dispatch => {\n  dispatch(toggleIsFetching(false));\n  dispatch(setCurrentPage(currentPage));\n  let response = await usersAPI.getUsers(currentPage, pageSize);\n  dispatch(toggleIsFetching(true));\n  dispatch(setUsers(response.items));\n  dispatch(setTotalCount(response.totalCount));\n};\nexport const getFriends = friends => async dispatch => {\n  let response = await usersAPI.getUsers();\n  dispatch(setUsers(response.items));\n  dispatch(setFriends(friends));\n};\n\nconst followUnfollowFlow = async (dispatch, userId, apiMet, actionCreator) => {\n  dispatch(toggleProgressIsFollowing(true, userId));\n  let response = await apiMet(userId);\n\n  if (response.data.resultCode === 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(toggleProgressIsFollowing(false, userId));\n};\n\nexport const unfollowThunk = userId => async dispatch => {\n  let apiMet = usersAPI.unfollowUser.bind(usersAPI);\n  let actionCreator = unfollow;\n  followUnfollowFlow(dispatch, userId, apiMet, actionCreator);\n};\nexport const followThunk = userId => async dispatch => {\n  let apiMet = usersAPI.followUser.bind(usersAPI);\n  let actionCreator = follow;\n  followUnfollowFlow(dispatch, userId, apiMet, actionCreator);\n}; // export const setFriendsAC = (dispatch) => {\n//     usersAPI.getUsers(3, 3).then(response => {\n//         dispatch(setUsers(response.items))\n//         dispatch(setBestFriends(response.items))\n//     })\n// }\n//\n//\n\nexport default usersReducer;","map":{"version":3,"sources":["C:/Users/1/Desktop/gittest/samuraiApp/src/Redux/users-reducer.js"],"names":["usersAPI","updateObjectInArray","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_PROGRESS_FOLLOWING","SET_FRIENDS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingProgress","friends","usersReducer","state","action","type","userId","followed","page","count","isFetch","isFollowing","filter","id","follow","unfollow","setUsers","setCurrentPage","setTotalCount","toggleIsFetching","toggleProgressIsFollowing","setFriends","getUsersThunkCreator","dispatch","response","getUsers","items","totalCount","getFriends","followUnfollowFlow","apiMet","actionCreator","data","resultCode","unfollowThunk","unfollowUser","bind","followThunk","followUser"],"mappings":"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","sourcesContent":["import {usersAPI} from \"../API/api\";\r\nimport {updateObjectInArray} from \"../Utils/object-helper\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_PROGRESS_FOLLOWING = 'TOGGLE_PROGRESS_FOLLOWING'\r\nconst SET_FRIENDS = 'SET_FRIENDS'\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingProgress: [],\r\n    friends: []\r\n}\r\n\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n                // users: state.users.map(u => {\r\n                //     if (u.id === action.userId) {\r\n                //         return {...u, followed: true}\r\n                        //Мы пробигаемся по массиву юзеров , если находим id юзера, что пришел из action\r\n                        //берем его , копируем и меняем значение followed на true.\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            }\r\n        }\r\n        case SET_TOTAL_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetch\r\n            }\r\n        }\r\n        case TOGGLE_PROGRESS_FOLLOWING:\r\n            return {\r\n                ...state,\r\n                followingProgress: action.isFollowing ?\r\n                    [...state.followingProgress, action.userId]\r\n                    : state.followingProgress.filter(id => id != action.userId)\r\n            }\r\n        case SET_FRIENDS:\r\n            return {\r\n                ...state,\r\n                friends: state.users.filter(users => (users.followed = true))\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const follow = (userId) => ({type: FOLLOW, userId})\r\nexport const unfollow = (userId) => ({type: UNFOLLOW, userId})\r\nexport const setUsers = (users) => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (page) => ({type: SET_CURRENT_PAGE, page})\r\nexport const setTotalCount = (count) => ({type: SET_TOTAL_COUNT, count})\r\nexport const toggleIsFetching = (isFetch) => ({type: TOGGLE_IS_FETCHING, isFetch})\r\nexport const toggleProgressIsFollowing = (isFollowing, userId) => ({\r\n    type: TOGGLE_PROGRESS_FOLLOWING,\r\n    isFollowing,\r\n    userId\r\n})\r\nexport const setFriends = (friends) => ({type: SET_FRIENDS, friends})\r\n\r\n\r\nexport const getUsersThunkCreator = (currentPage, pageSize) =>\r\n    async (dispatch) => {\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setCurrentPage(currentPage))\r\n        let response = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setUsers(response.items))\r\n        dispatch(setTotalCount(response.totalCount))\r\n\r\n    }\r\n\r\nexport const getFriends = (friends) =>\r\n    async (dispatch) => {\r\n        let response = await usersAPI.getUsers()\r\n        dispatch(setUsers(response.items))\r\n        dispatch(setFriends(friends))\r\n    }\r\n\r\nconst followUnfollowFlow = async (dispatch, userId, apiMet, actionCreator) => {\r\n    dispatch(toggleProgressIsFollowing(true, userId))\r\n    let response = await apiMet(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleProgressIsFollowing(false, userId))\r\n}\r\n\r\n\r\nexport const unfollowThunk = (userId) =>\r\n    async (dispatch) => {\r\n        let apiMet = usersAPI.unfollowUser.bind(usersAPI)\r\n        let actionCreator = unfollow\r\n        followUnfollowFlow(dispatch, userId, apiMet, actionCreator)\r\n\r\n    }\r\n\r\nexport const followThunk = (userId) =>\r\n    async (dispatch) => {\r\n        let apiMet = usersAPI.followUser.bind(usersAPI)\r\n        let actionCreator = follow\r\n        followUnfollowFlow(dispatch, userId, apiMet, actionCreator)\r\n    }\r\n\r\n// export const setFriendsAC = (dispatch) => {\r\n//     usersAPI.getUsers(3, 3).then(response => {\r\n//         dispatch(setUsers(response.items))\r\n//         dispatch(setBestFriends(response.items))\r\n//     })\r\n// }\r\n//\r\n//\r\n\r\n\r\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}