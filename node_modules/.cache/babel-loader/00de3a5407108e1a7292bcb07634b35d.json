{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\Start\\\\samurai\\\\src\\\\App-components\\\\Content\\\\Paginator\\\\Paginator.jsx\",\n    _this = this;\n\nimport pG from \"../Paginator/Paginator.module.css\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Paginator = function (props) {\n  let portionSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  } // let portionCount = Math.ceil(pagesCount / portionSize)\n  // let [portionNumber, setPortionNumber] = useState(1);\n  // let leftPortionNumber = (portionNumber - 1) * portionSize + 1;\n  // let rightPortionNumber = portionNumber * portionSize;\n  //\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: pG.paginator,\n      children: [console.log(portionSize = 10), pages // .filter(p => p >= leftPortionNumber && p <= rightPortionNumber)\n      .map(p => {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => {\n            props.onPageChanged(p);\n          },\n          className: props.currentPage === p && pG.selectedPage,\n          children: p\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 28\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, _this);\n};\n\n_c = Paginator;\nexport default Paginator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginator\");","map":{"version":3,"sources":["C:/Users/1/Desktop/Start/samurai/src/App-components/Content/Paginator/Paginator.jsx"],"names":["pG","React","useState","Paginator","props","portionSize","pagesCount","Math","ceil","totalUsersCount","pageSize","pages","i","push","paginator","console","log","map","p","onPageChanged","currentPage","selectedPage"],"mappings":";;;AAAA,OAAOA,EAAP,MAAe,mCAAf;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;AAEA,MAAMC,SAAS,GAAG,UAACC,KAAD,EAA6B;AAAA,MAArBC,WAAqB,uEAAP,EAAO;AAC3C,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUJ,KAAK,CAACK,eAAN,GAAwBL,KAAK,CAACM,QAAxC,CAAjB;AACA,MAAIC,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIN,UAArB,EAAiCM,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH,GAN0C,CAS3C;AACA;AACA;AACA;AACA;;;AAEA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAEZ,EAAE,CAACc,SAAnB;AAAA,iBACKC,OAAO,CAACC,GAAR,CAAYX,WAAW,GAAG,EAA1B,CADL,EAOKM,KAAK,CACF;AADE,OAEDM,GAFJ,CAESC,CAAD,IAAO;AACZ,4BAAO;AAAM,UAAA,OAAO,EAAE,MAAM;AAC5Bd,YAAAA,KAAK,CAACe,aAAN,CAAoBD,CAApB;AACH,WAFU;AAER,UAAA,SAAS,EAAEd,KAAK,CAACgB,WAAN,KAAsBF,CAAtB,IAA2BlB,EAAE,CAACqB,YAFjC;AAAA,oBAEgDH;AAFhD;AAAA;AAAA;AAAA;AAAA,iBAAP;AAEiE,OALpE,CAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAqBa,CApCjB;;KAAMf,S;AAsCU,eAAeA,SAAf","sourcesContent":["import pG from \"../Paginator/Paginator.module.css\";\r\nimport React, {useState} from \"react\";\r\n\r\nconst Paginator = (props, portionSize = 10) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n\r\n    // let portionCount = Math.ceil(pagesCount / portionSize)\r\n    // let [portionNumber, setPortionNumber] = useState(1);\r\n    // let leftPortionNumber = (portionNumber - 1) * portionSize + 1;\r\n    // let rightPortionNumber = portionNumber * portionSize;\r\n    //\r\n\r\n    return (\r\n        <div>\r\n            <div className={pG.paginator}>\r\n                {console.log(portionSize = 10)}\r\n                {/*{portionNumber > 1 &&*/}\r\n                {/*    <button onClick={() => {*/}\r\n                {/*        setPortionNumber(portionNumber - 1)*/}\r\n                {/*    }}> PERV</button>}*/}\r\n\r\n                {pages\r\n                    // .filter(p => p >= leftPortionNumber && p <= rightPortionNumber)\r\n                    .map((p) => {\r\n                    return <span onClick={() => {\r\n                    props.onPageChanged(p);\r\n                }} className={props.currentPage === p && pG.selectedPage}>{p}</span>})}\r\n                {/*{portionCount > portionNumber &&*/}\r\n                {/*    <button onClick={() => {setPortionNumber( portionNumber + 1)}}/>}*/}\r\n                    </div>\r\n\r\n                    </div>\r\n                    )\r\n                }\r\n\r\n                export default Paginator;"]},"metadata":{},"sourceType":"module"}