{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\gittest\\\\samuraiApp\\\\src\\\\App-components\\\\Content\\\\Paginator\\\\Paginator.jsx\",\n    _s = $RefreshSig$();\n\nimport pG from \"../Paginator/Paginator.module.css\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Paginator = props => {\n  _s();\n\n  let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let portionSize = 10;\n  let portionCount = Math.ceil(pagesCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftPortionNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionNumber = portionNumber * portionSize;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: pG.paginator,\n      children: [console.log(portionSize), portionNumber > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setPortionNumber(portionNumber - 1);\n        },\n        children: \" Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this), pages.filter(p => p >= leftPortionNumber && p <= rightPortionNumber).map(p => {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => {\n            props.onPageChanged(p);\n          },\n          className: props.currentPage === p && pG.selectedPage,\n          children: p\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 32\n        }, this);\n      }), portionCount > portionNumber && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setPortionNumber(portionNumber + 1);\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Paginator, \"8p8zb1vvZvsuWyQQS16DuuzsJLU=\");\n\n_c = Paginator;\nexport default Paginator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginator\");","map":{"version":3,"sources":["C:/Users/1/Desktop/gittest/samuraiApp/src/App-components/Content/Paginator/Paginator.jsx"],"names":["pG","React","useState","Paginator","props","pagesCount","Math","ceil","totalUsersCount","pageSize","pages","i","push","portionSize","portionCount","portionNumber","setPortionNumber","leftPortionNumber","rightPortionNumber","paginator","console","log","filter","p","map","onPageChanged","currentPage","selectedPage"],"mappings":";;;AAAA,OAAOA,EAAP,MAAe,mCAAf;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUH,KAAK,CAACI,eAAN,GAAwBJ,KAAK,CAACK,QAAxC,CAAjB;AACA,MAAIC,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIN,UAArB,EAAiCM,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;;AACD,MAAIE,WAAW,GAAG,EAAlB;AAEA,MAAIC,YAAY,GAAGR,IAAI,CAACC,IAAL,CAAUF,UAAU,GAAGQ,WAAvB,CAAnB;AACA,MAAI,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,CAAD,CAAhD;AACA,MAAIe,iBAAiB,GAAG,CAACF,aAAa,GAAG,CAAjB,IAAsBF,WAAtB,GAAoC,CAA5D;AACA,MAAIK,kBAAkB,GAAGH,aAAa,GAAGF,WAAzC;AAGA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAEb,EAAE,CAACmB,SAAnB;AAAA,iBACKC,OAAO,CAACC,GAAR,CAAYR,WAAZ,CADL,EAEKE,aAAa,GAAG,CAAhB,iBACG;AAAQ,QAAA,OAAO,EAAE,MAAM;AACnBC,UAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACH,SAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHR,EAOKL,KAAK,CACDY,MADJ,CACWC,CAAC,IAAIA,CAAC,IAAIN,iBAAL,IAA0BM,CAAC,IAAIL,kBAD/C,EAEIM,GAFJ,CAESD,CAAD,IAAO;AACR,4BAAO;AAAM,UAAA,OAAO,EAAE,MAAM;AACxBnB,YAAAA,KAAK,CAACqB,aAAN,CAAoBF,CAApB;AACH,WAFM;AAEJ,UAAA,SAAS,EAAEnB,KAAK,CAACsB,WAAN,KAAsBH,CAAtB,IAA2BvB,EAAE,CAAC2B,YAFrC;AAAA,oBAEoDJ;AAFpD;AAAA;AAAA;AAAA;AAAA,gBAAP;AAGH,OANJ,CAPL,EAcKT,YAAY,GAAGC,aAAf,iBACG;AAAQ,QAAA,OAAO,EAAE,MAAM;AACnBC,UAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACH,SAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH,CAvCD;;GAAMZ,S;;KAAAA,S;AAyCN,eAAeA,SAAf","sourcesContent":["import pG from \"../Paginator/Paginator.module.css\";\r\nimport React, {useState} from \"react\";\r\n\r\nconst Paginator = (props) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let portionSize = 10;\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionNumber = portionNumber * portionSize;\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={pG.paginator}>\r\n                {console.log(portionSize)}\r\n                {portionNumber > 1 &&\r\n                    <button onClick={() => {\r\n                        setPortionNumber(portionNumber - 1)\r\n                    }}> Prev</button>}\r\n\r\n                {pages\r\n                    .filter(p => p >= leftPortionNumber && p <= rightPortionNumber)\r\n                    .map((p) => {\r\n                        return <span onClick={() => {\r\n                            props.onPageChanged(p);\r\n                        }} className={props.currentPage === p && pG.selectedPage}>{p}</span>\r\n                    })}\r\n                {portionCount > portionNumber &&\r\n                    <button onClick={() => {\r\n                        setPortionNumber(portionNumber + 1)\r\n                    }}>Next</button>}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator;"]},"metadata":{},"sourceType":"module"}